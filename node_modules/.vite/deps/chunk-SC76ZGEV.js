import {
  useThemeProps
} from "./chunk-K4VRLEG5.js";
import {
  _extends
} from "./chunk-SWRT7OS5.js";
import {
  require_prop_types
} from "./chunk-NX5U4LY5.js";
import {
  require_jsx_runtime
} from "./chunk-PPF4KH7D.js";
import {
  require_react
} from "./chunk-IJJZSU2T.js";
import {
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/x-date-pickers/locales/utils/getPickersLocalization.js
var getPickersLocalization = (pickersTranslations) => {
  return {
    components: {
      MuiLocalizationProvider: {
        defaultProps: {
          localeText: _extends({}, pickersTranslations)
        }
      }
    }
  };
};

// node_modules/@mui/x-date-pickers/locales/nlNL.js
var nlNLPickers = {
  previousMonth: "Vorige maand",
  nextMonth: "Volgende maand",
  openPreviousView: "open vorige view",
  openNextView: "open volgende view",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "jaarweergave is geopend, schakel over naar kalenderweergave" : "kalenderweergave is geopend, switch naar jaarweergave",
  start: "Start",
  end: "Einde",
  cancelButtonLabel: "Annuleren",
  clearButtonLabel: "Resetten",
  okButtonLabel: "OK",
  todayButtonLabel: "Vandaag",
  clockLabelText: (view, time, adapter) => `Selecteer ${view}. ${time === null ? "Geen tijd geselecteerd" : `Geselecteerde tijd is ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} uren`,
  minutesClockNumberText: (minutes) => `${minutes} minuten`,
  secondsClockNumberText: (seconds) => `${seconds} seconden`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Kies datum, geselecteerde datum is ${utils.format(utils.date(rawValue), "fullDate")}` : "Kies datum",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Kies tijd, geselecteerde tijd is ${utils.format(utils.date(rawValue), "fullTime")}` : "Kies tijd",
  timeTableLabel: "kies tijd",
  dateTableLabel: "kies datum"
};
var nlNL = getPickersLocalization(nlNLPickers);

// node_modules/@mui/x-date-pickers/locales/plPL.js
var plPLPickers = {
  previousMonth: "Poprzedni miesiąc",
  nextMonth: "Następny miesiąc",
  openPreviousView: "otwórz poprzedni widok",
  openNextView: "otwórz następny widok",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "otwarty jest widok roku, przełącz na widok kalendarza" : "otwarty jest widok kalendarza, przełącz na widok roku",
  start: "Początek",
  end: "Koniec",
  cancelButtonLabel: "Anuluj",
  clearButtonLabel: "Wyczyść",
  okButtonLabel: "Zatwierdź",
  todayButtonLabel: "Dzisiaj",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "Nie wybrano czasu" : `Wybrany czas to ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} godzin`,
  minutesClockNumberText: (minutes) => `${minutes} minut`,
  secondsClockNumberText: (seconds) => `${seconds} sekund`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Wybierz datę, obecnie wybrana data to ${utils.format(utils.date(rawValue), "fullDate")}` : "Wybierz datę",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Wybierz czas, obecnie wybrany czas to ${utils.format(utils.date(rawValue), "fullTime")}` : "Wybierz czas",
  timeTableLabel: "wybierz czas",
  dateTableLabel: "wybierz datę"
};
var plPL = getPickersLocalization(plPLPickers);

// node_modules/@mui/x-date-pickers/locales/ptBR.js
var ptBRPickers = {
  previousMonth: "Mês anterior",
  nextMonth: "Próximo mês",
  openPreviousView: "Abrir próxima seleção",
  openNextView: "Abrir seleção anterior",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "Seleção de ano está aberta, alternando para seleção de calendário" : "Seleção de calendários está aberta, alternando para seleção de ano",
  start: "Início",
  end: "Fim",
  cancelButtonLabel: "Cancelar",
  clearButtonLabel: "Limpar",
  okButtonLabel: "OK",
  todayButtonLabel: "Hoje",
  clockLabelText: (view, time, adapter) => `Selecione ${view}. ${time === null ? "Hora não selecionada" : `Selecionado a hora ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} horas`,
  minutesClockNumberText: (minutes) => `${minutes} minutos`,
  secondsClockNumberText: (seconds) => `${seconds} segundos`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma data, data selecionada ${utils.format(utils.date(rawValue), "fullDate")}` : "Escolha uma data",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma hora, hora selecionada ${utils.format(utils.date(rawValue), "fullTime")}` : "Escolha uma hora",
  timeTableLabel: "escolha uma hora",
  dateTableLabel: "escolha uma data"
};
var ptBR = getPickersLocalization(ptBRPickers);

// node_modules/@mui/x-date-pickers/locales/trTR.js
var trTRPickers = {
  previousMonth: "Önceki ay",
  nextMonth: "Sonraki ay",
  openPreviousView: "sonraki görünüm",
  openNextView: "önceki görünüm",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "yıl görünümü açık, takvim görünümüne geç" : "takvim görünümü açık, yıl görünümüne geç",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `metin girişi görünümü açık, şuraya gidin: ${viewType} görünümü` : `${viewType} görünüm açık, metin girişi görünümüne gidin`,
  start: "Başlangıç",
  end: "Bitiş",
  cancelButtonLabel: "iptal",
  clearButtonLabel: "Temizle",
  okButtonLabel: "Tamam",
  todayButtonLabel: "Bugün",
  datePickerDefaultToolbarTitle: "Tarih Seç",
  dateTimePickerDefaultToolbarTitle: "Tarih & Saat seç",
  timePickerDefaultToolbarTitle: "Saat seç",
  dateRangePickerDefaultToolbarTitle: "Tarih aralığı seçin",
  clockLabelText: (view, time, adapter) => `${view} seç.  ${time === null ? "Zaman seçilmedi" : `Seçilen zaman: ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} saat`,
  minutesClockNumberText: (minutes) => `${minutes} dakika`,
  secondsClockNumberText: (seconds) => `${seconds} saniye`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Tarih seçin, seçilen tarih: ${utils.format(value, "fullDate")}` : "Tarih seç",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Saat seçin, seçilen saat: ${utils.format(value, "fullTime")}` : "Saat seç",
  timeTableLabel: "saat seç",
  dateTableLabel: "tarih seç"
};
var trTR = getPickersLocalization(trTRPickers);

// node_modules/@mui/x-date-pickers/locales/deDE.js
var clockViews = {
  hours: "Stunden",
  minutes: "Minuten",
  seconds: "Sekunden"
};
var pickerViews = {
  calendar: "Kalenderansicht",
  clock: "Uhransicht"
};
var deDEPickers = {
  previousMonth: "Letzter Monat",
  nextMonth: "Nächster Monat",
  openPreviousView: "Letzte Ansicht öffnen",
  openNextView: "Nächste Ansicht öffnen",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "Jahresansicht ist geöffnet, zur Kalenderansicht wechseln" : "Kalenderansicht ist geöffnet, zur Jahresansicht wechseln",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Texteingabeansicht ist geöffnet, zur ${pickerViews[viewType]} wechseln` : `${pickerViews[viewType]} ist geöffnet, zur Texteingabeansicht wechseln`,
  start: "Beginn",
  end: "Ende",
  cancelButtonLabel: "Abbrechen",
  clearButtonLabel: "Löschen",
  okButtonLabel: "OK",
  todayButtonLabel: "Heute",
  datePickerDefaultToolbarTitle: "Datum auswählen",
  dateTimePickerDefaultToolbarTitle: "Datum & Uhrzeit auswählen",
  timePickerDefaultToolbarTitle: "Uhrzeit auswählen",
  dateRangePickerDefaultToolbarTitle: "Datumsbereich auswählen",
  clockLabelText: (view, time, adapter) => {
    var _clockViews$view;
    return `${(_clockViews$view = clockViews[view]) != null ? _clockViews$view : view} auswählen. ${time === null ? "Keine Uhrzeit ausgewählt" : `Gewählte Uhrzeit ist ${adapter.format(time, "fullTime")}`}`;
  },
  hoursClockNumberText: (hours) => `${hours} ${clockViews.hours}`,
  minutesClockNumberText: (minutes) => `${minutes} ${clockViews.minutes}`,
  secondsClockNumberText: (seconds) => `${seconds}  ${clockViews.seconds}`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Datum auswählen, gewähltes Datum ist ${utils.format(utils.date(rawValue), "fullDate")}` : "Datum auswählen",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Uhrzeit auswählen, gewählte Uhrzeit ist ${utils.format(utils.date(rawValue), "fullTime")}` : "Uhrzeit auswählen",
  timeTableLabel: "Uhrzeit auswählen",
  dateTableLabel: "Datum auswählen"
};
var deDE = getPickersLocalization(deDEPickers);

// node_modules/@mui/x-date-pickers/locales/esES.js
var views = {
  hours: "las horas",
  minutes: "los minutos",
  seconds: "los segundos"
};
var esESPickers = {
  previousMonth: "Último mes",
  nextMonth: "Próximo mes",
  openPreviousView: "abrir la última vista",
  openNextView: "abrir la siguiente vista",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "la vista del año está abierta, cambie a la vista de calendario" : "la vista de calendario está abierta, cambie a la vista del año",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `la vista de entrada de texto está abierta, ir a la vista ${viewType}` : `la vista ${viewType} está abierta, ir a la vista de entrada de texto`,
  start: "Empezar",
  end: "Terminar",
  cancelButtonLabel: "Cancelar",
  clearButtonLabel: "Limpiar",
  okButtonLabel: "OK",
  todayButtonLabel: "Hoy",
  datePickerDefaultToolbarTitle: "Seleccionar fecha",
  dateTimePickerDefaultToolbarTitle: "Seleccionar fecha & hora",
  timePickerDefaultToolbarTitle: "Seleccionar hora",
  dateRangePickerDefaultToolbarTitle: "Seleccionar rango de fecha",
  clockLabelText: (view, time, adapter) => `Seleccione ${views[view]}. ${time === null ? "Sin tiempo seleccionado" : `El tiempo seleccionado es ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} horas`,
  minutesClockNumberText: (minutes) => `${minutes} minutos`,
  secondsClockNumberText: (seconds) => `${seconds} segundos`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Elige la fecha, la fecha elegida es ${utils.format(utils.date(rawValue), "fullDate")}` : "Elige la fecha",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Elige la hora, la hora elegido es ${utils.format(utils.date(rawValue), "fullTime")}` : "Elige la hora",
  timeTableLabel: "elige la fecha",
  dateTableLabel: "elige la hora"
};
var esES = getPickersLocalization(esESPickers);

// node_modules/@mui/x-date-pickers/locales/faIR.js
var faIRPickers = {
  previousMonth: "ماه گذشته",
  nextMonth: "ماه آینده",
  openPreviousView: "نمای قبلی",
  openNextView: "نمای بعدی",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "نمای سال باز است، رفتن به نمای تقویم" : "نمای تقویم باز است، رفتن به نمای سال",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `نمای ورودی متن باز است، رفتن به نمای ${viewType}` : `نمای ${viewType} باز است، رفتن به نمای ورودی متن`,
  start: "شروع",
  end: "پایان",
  cancelButtonLabel: "لغو",
  clearButtonLabel: "پاک کردن",
  okButtonLabel: "اوکی",
  todayButtonLabel: "امروز",
  datePickerDefaultToolbarTitle: "تاریخ را انتخاب کنید",
  dateTimePickerDefaultToolbarTitle: "تاریخ و ساعت را انتخاب کنید",
  timePickerDefaultToolbarTitle: "ساعت را انتخاب کنید",
  dateRangePickerDefaultToolbarTitle: "محدوده تاریخ را انتخاب کنید",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "هیچ ساعتی انتخاب نشده است" : `ساعت انتخاب ${adapter.format(time, "fullTime")} می باشد`}`,
  hoursClockNumberText: (hours) => `${hours} ساعت ها`,
  minutesClockNumberText: (minutes) => `${minutes} دقیقه ها`,
  secondsClockNumberText: (seconds) => `${seconds} ثانیه ها`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `تاریخ را انتخاب کنید، تاریخ انتخاب شده ${utils.format(utils.date(rawValue), "fullDate")} می باشد` : "تاریخ را انتخاب کنید",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `ساعت را انتخاب کنید، ساعت انتخاب شده ${utils.format(utils.date(rawValue), "fullTime")} می باشد` : "ساعت را انتخاب کنید",
  timeTableLabel: "انتخاب تاریخ",
  dateTableLabel: "انتخاب ساعت"
};
var faIR = getPickersLocalization(faIRPickers);

// node_modules/@mui/x-date-pickers/locales/fiFI.js
var views2 = {
  hours: "tunnit",
  minutes: "minuutit",
  seconds: "sekuntit"
};
var viewTranslation = {
  calendar: "kalenteri",
  clock: "kello"
};
var fiFIPickers = {
  previousMonth: "Edellinen kuukausi",
  nextMonth: "Seuraava kuukausi",
  openPreviousView: "avaa edellinen kuukausi",
  openNextView: "avaa seuraava kuukausi",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "vuosinäkymä on auki, vaihda kalenterinäkymään" : "kalenterinäkymä on auki, vaihda vuosinäkymään",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `tekstikenttä on auki, mene ${viewTranslation[viewType]}näkymään` : `${viewTranslation[viewType]}näkymä on auki, mene tekstikenttään`,
  start: "Alku",
  end: "Loppu",
  cancelButtonLabel: "Peruuta",
  clearButtonLabel: "Tyhjennä",
  okButtonLabel: "OK",
  todayButtonLabel: "Tänään",
  datePickerDefaultToolbarTitle: "Valitse päivä",
  dateTimePickerDefaultToolbarTitle: "Valitse päivä ja aika",
  timePickerDefaultToolbarTitle: "Valitse aika",
  dateRangePickerDefaultToolbarTitle: "Valitse aikaväli",
  clockLabelText: (view, time, adapter) => `Valitse ${views2[view]}. ${time === null ? "Ei aikaa valittuna" : `Valittu aika on ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} tuntia`,
  minutesClockNumberText: (minutes) => `${minutes} minuuttia`,
  secondsClockNumberText: (seconds) => `${seconds} sekunttia`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Valitse päivä, valittu päivä on ${utils.format(utils.date(rawValue), "fullDate")}` : "Valitse päivä",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Valitse aika, valittu aika on ${utils.format(utils.date(rawValue), "fullTime")}` : "Valitse aika",
  timeTableLabel: "valitse aika",
  dateTableLabel: "valitse päivä"
};
var fiFI = getPickersLocalization(fiFIPickers);

// node_modules/@mui/x-date-pickers/locales/csCZ.js
var timeViews = {
  hours: "Hodiny",
  minutes: "Minuty",
  seconds: "Sekundy"
};
var pickerViews2 = {
  calendar: "kalendáře",
  clock: "času"
};
var csCZPickers = {
  previousMonth: "Další měsíc",
  nextMonth: "Předchozí month",
  openPreviousView: "otevřít předchozí zobrazení",
  openNextView: "otevřít další zobrazení",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "roční zobrazení otevřeno, přepněte do zobrazení kalendáře" : "zobrazení kalendáře otevřeno, přepněte do zobrazení roku",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Zobrazení pro zadávání textu je otevřené, přepněte do zobrazení ${pickerViews2[viewType]}` : `Zobrazení ${pickerViews2[viewType]} je otevřené, přepněte do zobrazení textového pole`,
  start: "Začátek",
  end: "Konec",
  cancelButtonLabel: "Zrušit",
  clearButtonLabel: "Vymazat",
  okButtonLabel: "Potvrdit",
  todayButtonLabel: "Dnes",
  datePickerDefaultToolbarTitle: "Vyberte datum",
  dateTimePickerDefaultToolbarTitle: "Vyberte datum a čas",
  timePickerDefaultToolbarTitle: "Vyberte čas",
  dateRangePickerDefaultToolbarTitle: "Vyberete rozmezí dat",
  clockLabelText: (view, time, adapter) => {
    var _timeViews$view;
    return `${(_timeViews$view = timeViews[view]) != null ? _timeViews$view : view} vybrány. ${time === null ? "Není vybrán čas" : `Vybraný čas je ${adapter.format(time, "fullTime")}`}`;
  },
  hoursClockNumberText: (hours) => `${hours} hodin`,
  minutesClockNumberText: (minutes) => `${minutes} minut`,
  secondsClockNumberText: (seconds) => `${seconds} sekund`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Vybrané datum, vybrané datum je ${utils.format(value, "fullDate")}` : "Vyberte datum",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Vybrané čas, vybraný čas je ${utils.format(value, "fullTime")}` : "Vyberte čas",
  timeTableLabel: "vyberte čas",
  dateTableLabel: "vyberte datum"
};
var csCZ = getPickersLocalization(csCZPickers);

// node_modules/@mui/x-date-pickers/locales/frFR.js
var views3 = {
  hours: "heures",
  minutes: "minutes",
  seconds: "secondes"
};
var viewTranslation2 = {
  calendar: "calendrier",
  clock: "horloge"
};
var frFRPickers = {
  previousMonth: "Mois précédent",
  nextMonth: "Mois suivant",
  openPreviousView: "Ouvrir la vue précédente",
  openNextView: "Ouvrir la vue suivante",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "La vue année est ouverte, ouvrir la vue calendrier" : "La vue calendrier est ouverte, ouvrir la vue année",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `passer du champ text au ${viewTranslation2[viewType]}` : `passer du ${viewTranslation2[viewType]} au champ text`,
  start: "Début",
  end: "Fin",
  cancelButtonLabel: "Annuler",
  clearButtonLabel: "Vider",
  okButtonLabel: "OK",
  todayButtonLabel: "Aujourd'hui",
  clockLabelText: (view, time, adapter) => `Choix des ${views3[view]}. ${time === null ? "Aucune heure choisie" : `L'heure choisie est ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} heures`,
  minutesClockNumberText: (minutes) => `${minutes} minutes`,
  secondsClockNumberText: (seconds) => `${seconds} secondes`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir la date, la date sélectionnée est ${utils.format(utils.date(rawValue), "fullDate")}` : "Choisir la date",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir l'heure, l'heure sélectionnée est ${utils.format(utils.date(rawValue), "fullTime")}` : "Choisir l'heure",
  timeTableLabel: "choix de l'heure",
  dateTableLabel: "choix de la date"
};
var frFR = getPickersLocalization(frFRPickers);

// node_modules/@mui/x-date-pickers/locales/enUS.js
var enUSPickers = {
  previousMonth: "Previous month",
  nextMonth: "Next month",
  openPreviousView: "open previous view",
  openNextView: "open next view",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,
  start: "Start",
  end: "End",
  cancelButtonLabel: "Cancel",
  clearButtonLabel: "Clear",
  okButtonLabel: "OK",
  todayButtonLabel: "Today",
  datePickerDefaultToolbarTitle: "Select date",
  dateTimePickerDefaultToolbarTitle: "Select date & time",
  timePickerDefaultToolbarTitle: "Select time",
  dateRangePickerDefaultToolbarTitle: "Select date range",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "No time selected" : `Selected time is ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} hours`,
  minutesClockNumberText: (minutes) => `${minutes} minutes`,
  secondsClockNumberText: (seconds) => `${seconds} seconds`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue), "fullDate")}` : "Choose date",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose time, selected time is ${utils.format(utils.date(rawValue), "fullTime")}` : "Choose time",
  timeTableLabel: "pick time",
  dateTableLabel: "pick date"
};
var DEFAULT_LOCALE = enUSPickers;
var enUS = getPickersLocalization(enUSPickers);

// node_modules/@mui/x-date-pickers/locales/nbNO.js
var nbNOPickers = {
  previousMonth: "Forrige måned",
  nextMonth: "Neste måned",
  openPreviousView: "åpne forrige visning",
  openNextView: "åpne neste visning",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "årsvisning er åpen, bytt til kalendervisning" : "kalendervisning er åpen, bytt til årsvisning",
  start: "Start",
  end: "Slutt",
  cancelButtonLabel: "Avbryt",
  clearButtonLabel: "Fjern",
  okButtonLabel: "OK",
  todayButtonLabel: "I dag",
  clockLabelText: (view, time, adapter) => `Velg ${view}. ${time === null ? "Ingen tid valgt" : `Valgt tid er ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} timer`,
  minutesClockNumberText: (minutes) => `${minutes} minutter`,
  secondsClockNumberText: (seconds) => `${seconds} sekunder`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Velg dato, valgt dato er ${utils.format(utils.date(rawValue), "fullDate")}` : "Velg dato",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Velg tid, valgt tid er ${utils.format(utils.date(rawValue), "fullTime")}` : "Velg tid",
  timeTableLabel: "velg tid",
  dateTableLabel: "velg dato"
};
var nbNO = getPickersLocalization(nbNOPickers);

// node_modules/@mui/x-date-pickers/locales/svSE.js
var svSEPickers = {
  previousMonth: "Föregående månad",
  nextMonth: "Nästa månad",
  openPreviousView: "öppna föregående vy",
  openNextView: "öppna nästa vy",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "årsvyn är öppen, byt till kalendervy" : "kalendervyn är öppen, byt till årsvy",
  start: "Start",
  end: "Slut",
  cancelButtonLabel: "Avbryt",
  clearButtonLabel: "Rensa",
  okButtonLabel: "OK",
  todayButtonLabel: "Idag",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "Ingen tid vald" : `Vald tid är ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} timmar`,
  minutesClockNumberText: (minutes) => `${minutes} minuter`,
  secondsClockNumberText: (seconds) => `${seconds} sekunder`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Välj datum, valt datum är ${utils.format(utils.date(rawValue), "fullDate")}` : "Välj datum",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Välj tid, vald tid är ${utils.format(utils.date(rawValue), "fullTime")}` : "Välj tid",
  timeTableLabel: "välj tid",
  dateTableLabel: "välj datum"
};
var svSE = getPickersLocalization(svSEPickers);

// node_modules/@mui/x-date-pickers/locales/itIT.js
var views4 = {
  hours: "le ore",
  minutes: "i minuti",
  seconds: "i secondi"
};
var itITPickers = {
  previousMonth: "Mese precedente",
  nextMonth: "Mese successivo",
  openPreviousView: "apri la vista precedente",
  openNextView: "apri la vista successiva",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "la vista dell'anno è aperta, passare alla vista del calendario" : "la vista dell'calendario è aperta, passare alla vista dell'anno",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `la vista del campo di testo è aperta, passare alla vista ${viewType}` : `la vista aperta è: ${viewType}, vai alla vista del campo di testo`,
  start: "Inizio",
  end: "Fine",
  cancelButtonLabel: "Cancellare",
  clearButtonLabel: "Sgomberare",
  okButtonLabel: "OK",
  todayButtonLabel: "Oggi",
  datePickerDefaultToolbarTitle: "Seleziona data",
  dateTimePickerDefaultToolbarTitle: "Seleziona data e orario",
  timePickerDefaultToolbarTitle: "Seleziona orario",
  dateRangePickerDefaultToolbarTitle: "Seleziona intervallo di date",
  clockLabelText: (view, time, adapter) => `Seleziona ${views4[view]}. ${time === null ? "Nessun orario selezionato" : `L'ora selezionata è ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} ore`,
  minutesClockNumberText: (minutes) => `${minutes} minuti`,
  secondsClockNumberText: (seconds) => `${seconds} secondi`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli la data, la data selezionata è ${utils.format(utils.date(rawValue), "fullDate")}` : "Scegli la data",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli l'ora, l'ora selezionata è ${utils.format(utils.date(rawValue), "fullTime")}` : "Scegli l'ora",
  timeTableLabel: "scegli un ora",
  dateTableLabel: "scegli una data"
};
var itIT = getPickersLocalization(itITPickers);

// node_modules/@mui/x-date-pickers/locales/zhCN.js
var views5 = {
  hours: "小时",
  minutes: "分钟",
  seconds: "秒"
};
var zhCNPickers = {
  previousMonth: "上个月",
  nextMonth: "下个月",
  openPreviousView: "前一个视图",
  openNextView: "下一个视图",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "年视图已打开，切换为日历视图" : "日历视图已打开，切换为年视图",
  start: "开始",
  end: "结束",
  cancelButtonLabel: "取消",
  clearButtonLabel: "清除",
  okButtonLabel: "确认",
  todayButtonLabel: "今天",
  clockLabelText: (view, time, adapter) => `Select ${views5[view]}. ${time === null ? "未选择时间" : `已选择${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours}小时`,
  minutesClockNumberText: (minutes) => `${minutes}分钟`,
  secondsClockNumberText: (seconds) => `${seconds}秒`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `选择日期，已选择${utils.format(utils.date(rawValue), "fullDate")}` : "选择日期",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `选择时间，已选择${utils.format(utils.date(rawValue), "fullTime")}` : "选择时间",
  timeTableLabel: "选择时间",
  dateTableLabel: "选择日期"
};
var zhCN = getPickersLocalization(zhCNPickers);

// node_modules/@mui/x-date-pickers/locales/koKR.js
var views6 = {
  hours: "시간을",
  minutes: "분을",
  seconds: "초를"
};
var koKRPickers = {
  previousMonth: "이전 달",
  nextMonth: "다음 달",
  openPreviousView: "이전 화면 보기",
  openNextView: "다음 화면 보기",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "연도 선택 화면에서 달력 화면으로 전환하기" : "달력 화면에서 연도 선택 화면으로 전환하기",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `텍스트 입력 화면에서 ${viewType} 화면으로 전환하기` : `${viewType} 화면에서 텍스트 입력 화면으로 전환하기`,
  start: "시작",
  end: "종료",
  cancelButtonLabel: "취소",
  clearButtonLabel: "초기화",
  okButtonLabel: "확인",
  todayButtonLabel: "오늘",
  datePickerDefaultToolbarTitle: "날짜 선택하기",
  dateTimePickerDefaultToolbarTitle: "날짜 & 시간 선택하기",
  timePickerDefaultToolbarTitle: "시간 선택하기",
  dateRangePickerDefaultToolbarTitle: "날짜 범위 선택하기",
  clockLabelText: (view, time, adapter) => `${views6[view]} 선택하세요. ${time === null ? "시간을 선택하지 않았습니다." : `현재 선택된 시간은 ${adapter.format(time, "fullTime")}입니다.`}`,
  hoursClockNumberText: (hours) => `${hours}시간`,
  minutesClockNumberText: (minutes) => `${minutes}분`,
  secondsClockNumberText: (seconds) => `${seconds}초`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `날짜를 선택하세요. 현재 선택된 날짜는 ${utils.format(utils.date(rawValue), "fullDate")}입니다.` : "날짜를 선택하세요",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `시간을 선택하세요. 현재 선택된 시간은 ${utils.format(utils.date(rawValue), "fullTime")}입니다.` : "시간을 선택하세요",
  timeTableLabel: "선택한 시간",
  dateTableLabel: "선택한 날짜"
};
var koKR = getPickersLocalization(koKRPickers);

// node_modules/@mui/x-date-pickers/locales/isIS.js
var isISPickers = {
  previousMonth: "Fyrri mánuður",
  nextMonth: "Næsti mánuður",
  openPreviousView: "opna fyrri skoðun",
  openNextView: "opna næstu skoðun",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "ársskoðun er opin, skipta yfir í dagatalsskoðun" : "dagatalsskoðun er opin, skipta yfir í ársskoðun",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => {
    const viewTypeTranslated = viewType === "calendar" ? "dagatals" : "klukku";
    return isKeyboardInputOpen ? `textainnsláttur er opinn, fara í ${viewTypeTranslated}skoðun` : `${viewTypeTranslated}skoðun er opin, opna fyrir textainnslátt`;
  },
  start: "Upphaf",
  end: "Endir",
  cancelButtonLabel: "Hætta við",
  clearButtonLabel: "Hreinsa",
  okButtonLabel: "OK",
  todayButtonLabel: "Í dag",
  datePickerDefaultToolbarTitle: "Velja dagsetningu",
  dateTimePickerDefaultToolbarTitle: "Velja dagsetningu og tíma",
  timePickerDefaultToolbarTitle: "Velja tíma",
  dateRangePickerDefaultToolbarTitle: "Velja tímabil",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "Enginn tími valinn" : `Valinn tími er ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} klukkustundir`,
  minutesClockNumberText: (minutes) => `${minutes} mínútur`,
  secondsClockNumberText: (seconds) => `${seconds} sekúndur`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Velja dagsetningu, valin dagsetning er ${utils.format(utils.date(rawValue), "fullDate")}` : "Velja dagsetningu",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Velja tíma, valinn tími er ${utils.format(utils.date(rawValue), "fullTime")}` : "Velja tíma",
  timeTableLabel: "velja tíma",
  dateTableLabel: "velja dagsetningu"
};
var isIS = getPickersLocalization(isISPickers);

// node_modules/@mui/x-date-pickers/locales/jaJP.js
var clockViews2 = {
  hours: "時間",
  minutes: "分",
  seconds: "秒"
};
var pickerViews3 = {
  calendar: "カレンダー表示",
  clock: "時計表示"
};
var jaJPPickers = {
  previousMonth: "先月",
  nextMonth: "来月",
  openPreviousView: "前の表示を開く",
  openNextView: "次の表示を開く",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "年選択表示からカレンダー表示に切り替える" : "カレンダー表示から年選択表示に切り替える",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `テキスト入力表示から${pickerViews3[viewType]}に切り替える` : `${pickerViews3[viewType]}からテキスト入力表示に切り替える`,
  start: "開始",
  end: "終了",
  cancelButtonLabel: "キャンセル",
  clearButtonLabel: "クリア",
  okButtonLabel: "確定",
  todayButtonLabel: "今日",
  datePickerDefaultToolbarTitle: "日付を選択",
  dateTimePickerDefaultToolbarTitle: "日時を選択",
  timePickerDefaultToolbarTitle: "時間を選択",
  dateRangePickerDefaultToolbarTitle: "日付の範囲を選択",
  clockLabelText: (view, time, adapter) => {
    var _clockViews$view;
    return `${(_clockViews$view = clockViews2[view]) != null ? _clockViews$view : view}を選択してください ${time === null ? "時間が選択されていません" : `選択した時間は ${adapter.format(time, "fullTime")} です`}`;
  },
  hoursClockNumberText: (hours) => `${hours} ${clockViews2.hours}`,
  minutesClockNumberText: (minutes) => `${minutes} ${clockViews2.minutes}`,
  secondsClockNumberText: (seconds) => `${seconds} ${clockViews2.seconds}`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `日付を選択してください。選択した日付は ${utils.format(value, "fullDate")} です` : "日付を選択してください",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `時間を選択してください。選択した時間は ${utils.format(value, "fullTime")} です` : "時間を選択してください",
  timeTableLabel: "時間を選択",
  dateTableLabel: "日付を選択"
};
var jaJP = getPickersLocalization(jaJPPickers);

// node_modules/@mui/x-date-pickers/locales/ukUA.js
var ukUAPickers = {
  previousMonth: "Попередній місяць",
  nextMonth: "Наступний місяць",
  openPreviousView: "відкрити попередній вигляд",
  openNextView: "відкрити наступний вигляд",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "річний вигляд відкрито, перейти до календарного вигляду" : "календарний вигляд відкрито, перейти до річного вигляду",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `текстове поле відкрите, перейти до  ${viewType} вигляду` : `${viewType} вигляд наразі відкрито, перейти до текстового поля`,
  start: "Початок",
  end: "Кінець",
  cancelButtonLabel: "Відміна",
  clearButtonLabel: "Очистити",
  okButtonLabel: "OK",
  todayButtonLabel: "Сьогодні",
  datePickerDefaultToolbarTitle: "Вибрати дату",
  dateTimePickerDefaultToolbarTitle: "Вибрати дату і час",
  timePickerDefaultToolbarTitle: "Вибрати час",
  dateRangePickerDefaultToolbarTitle: "Вибрати календарний період",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "Час не вибраний" : `Вибрано час ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} годин`,
  minutesClockNumberText: (minutes) => `${minutes} хвилин`,
  secondsClockNumberText: (seconds) => `${seconds} секунд`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Оберіть дату, обрана дата  ${utils.format(value, "fullDate")}` : "Оберіть дату",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Оберіть час, обраний час  ${utils.format(value, "fullTime")}` : "Оберіть час",
  timeTableLabel: "оберіть час",
  dateTableLabel: "оберіть дату"
};
var ukUA = getPickersLocalization(ukUAPickers);

// node_modules/@mui/x-date-pickers/locales/urPK.js
var urPKPickers = {
  previousMonth: "پچھلا مہینہ",
  nextMonth: "اگلا مہینہ",
  openPreviousView: "پچھلا ویو کھولیں",
  openNextView: "اگلا ویو کھولیں",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "سال والا ویو کھلا ہے۔ کیلنڈر والا ویو کھولیں" : "کیلنڈر والا ویو کھلا ہے۔ سال والا ویو کھولیں",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `،ٹیکسٹ ویو کھلا ہے ${viewType} ویو کھولیں` : `${viewType} ویو کھلا ہے، ٹیکسٹ ویو کھولیں`,
  start: "شروع",
  end: "ختم",
  cancelButtonLabel: "کینسل",
  clearButtonLabel: "کلئیر",
  okButtonLabel: "اوکے",
  todayButtonLabel: "آج",
  datePickerDefaultToolbarTitle: "تاریخ منتخب کریں",
  dateTimePickerDefaultToolbarTitle: "تاریخ اور وقت منتخب کریں",
  timePickerDefaultToolbarTitle: "وقت منتخب کریں",
  dateRangePickerDefaultToolbarTitle: "تاریخوں کی رینج منتخب کریں",
  clockLabelText: (view, time, adapter) => `${view} منتخب کریں ${time === null ? "کوئی وقت منتخب نہیں" : `منتخب وقت ہے ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} گھنٹے`,
  minutesClockNumberText: (minutes) => `${minutes} منٹ`,
  secondsClockNumberText: (seconds) => `${seconds} سیکنڈ`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `تاریخ منتخب کریں، منتخب شدہ تاریخ ہے ${utils.format(value, "fullDate")}` : "تاریخ منتخب کریں",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `وقت منتخب کریں، منتخب شدہ وقت ہے ${utils.format(value, "fullTime")}` : "وقت منتخب کریں",
  timeTableLabel: "وقت منتخب کریں",
  dateTableLabel: "تاریخ منتخب کریں"
};
var urPK = getPickersLocalization(urPKPickers);

// node_modules/@mui/x-date-pickers/locales/beBY.js
var views7 = {
  hours: "гадзіны",
  minutes: "хвіліны",
  seconds: "секунды",
  calendar: "календара",
  clock: "часу"
};
var beBYPickers = {
  previousMonth: "Папярэдні месяц",
  nextMonth: "Наступны месяц",
  openPreviousView: "адкрыць папярэдні выгляд",
  openNextView: "адкрыць наступны выгляд",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "гадавы выгляд адкрыты, перайсці да каляндарнага выгляду" : "каляндарны выгляд адкрыты, перайсці да гадавога выгляду",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `тэкставае поле адкрыта, перайсці да выгляду ${views7[viewType]}` : `Выгляд ${views7[viewType]} зараз адкрыты, перайсці да тэкставага поля`,
  start: "Пачатак",
  end: "Канец",
  cancelButtonLabel: "Адмена",
  clearButtonLabel: "Ачысціць",
  okButtonLabel: "OK",
  todayButtonLabel: "Сёння",
  datePickerDefaultToolbarTitle: "Абраць дату",
  dateTimePickerDefaultToolbarTitle: "Абраць дату і час",
  timePickerDefaultToolbarTitle: "Абраць час",
  dateRangePickerDefaultToolbarTitle: "Абраць каляндарны перыяд",
  clockLabelText: (view, time, adapter) => `Абярыце ${views7[view]}. ${time === null ? "Час не абраны" : `Абраны час ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} гадзін`,
  minutesClockNumberText: (minutes) => `${minutes} хвілін`,
  secondsClockNumberText: (seconds) => `${seconds} секунд`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Абраць дату, абрана дата  ${utils.format(value, "fullDate")}` : "Абраць дату",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Абраць час, абрыны час  ${utils.format(value, "fullTime")}` : "Абраць час",
  timeTableLabel: "абраць час",
  dateTableLabel: "абраць дату"
};
var beBY = getPickersLocalization(beBYPickers);

// node_modules/@mui/x-date-pickers/locales/ruRU.js
var timeViews2 = {
  hours: "часы",
  minutes: "минуты",
  seconds: "секунды"
};
var viewTypes = {
  calendar: "календарный",
  clock: "часовой"
};
var ruRUPickers = {
  previousMonth: "Предыдущий месяц",
  nextMonth: "Следующий месяц",
  openPreviousView: "открыть предыдущий вид",
  openNextView: "открыть следующий вид",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "открыт годовой вид, переключить на календарный вид" : "открыт календарный вид, переключить на годовой вид",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Открыт текстовый вид, перейти на ${viewTypes[viewType]} вид` : `Открыт ${viewTypes[viewType]} вид, перейти на текстовый вид`,
  start: "Начало",
  end: "Конец",
  cancelButtonLabel: "Отмена",
  clearButtonLabel: "Очистить",
  okButtonLabel: "Ок",
  todayButtonLabel: "Сегодня",
  datePickerDefaultToolbarTitle: "Выбрать дату",
  dateTimePickerDefaultToolbarTitle: "Выбрать дату и время",
  timePickerDefaultToolbarTitle: "Выбрать время",
  dateRangePickerDefaultToolbarTitle: "Выбрать период",
  clockLabelText: (view, time, adapter) => `Выбрать ${timeViews2[view]}. ${time === null ? "Время не выбрано" : `Выбрано время ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} часов`,
  minutesClockNumberText: (minutes) => `${minutes} минут`,
  secondsClockNumberText: (seconds) => `${seconds} секунд`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Выберите дату, выбрана дата ${utils.format(value, "fullDate")}` : "Выберите дату",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Выберите время, выбрано время ${utils.format(value, "fullTime")}` : "Выберите время",
  timeTableLabel: "выбрать время",
  dateTableLabel: "выбрать дату"
};
var ruRU = getPickersLocalization(ruRUPickers);

// node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var MuiPickersAdapterContext = React.createContext(null);
if (true) {
  MuiPickersAdapterContext.displayName = "MuiPickersAdapterContext";
}
var warnedOnce = false;
function LocalizationProvider(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiLocalizationProvider"
  });
  const {
    children,
    dateAdapter: Utils,
    dateFormats,
    dateLibInstance,
    locale,
    adapterLocale,
    localeText
  } = props;
  if (true) {
    if (!warnedOnce && locale !== void 0) {
      warnedOnce = true;
      console.warn("LocalizationProvider's prop `locale` is deprecated and replaced by `adapterLocale`");
    }
  }
  const utils = React.useMemo(() => new Utils({
    locale: adapterLocale != null ? adapterLocale : locale,
    formats: dateFormats,
    instance: dateLibInstance
  }), [Utils, locale, adapterLocale, dateFormats, dateLibInstance]);
  const defaultDates = React.useMemo(() => {
    return {
      minDate: utils.date("1900-01-01T00:00:00.000"),
      maxDate: utils.date("2099-12-31T00:00:00.000")
    };
  }, [utils]);
  const contextValue = React.useMemo(() => {
    return {
      utils,
      defaultDates,
      localeText: _extends({}, DEFAULT_LOCALE, localeText != null ? localeText : {})
    };
  }, [defaultDates, utils, localeText]);
  return (0, import_jsx_runtime.jsx)(MuiPickersAdapterContext.Provider, {
    value: contextValue,
    children
  });
}
true ? LocalizationProvider.propTypes = {
  adapterLocale: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string]),
  children: import_prop_types.default.node,
  dateAdapter: import_prop_types.default.func.isRequired,
  dateFormats: import_prop_types.default.shape({
    dayOfMonth: import_prop_types.default.string,
    fullDate: import_prop_types.default.string,
    fullDateTime: import_prop_types.default.string,
    fullDateTime12h: import_prop_types.default.string,
    fullDateTime24h: import_prop_types.default.string,
    fullDateWithWeekday: import_prop_types.default.string,
    fullTime: import_prop_types.default.string,
    fullTime12h: import_prop_types.default.string,
    fullTime24h: import_prop_types.default.string,
    hours12h: import_prop_types.default.string,
    hours24h: import_prop_types.default.string,
    keyboardDate: import_prop_types.default.string,
    keyboardDateTime: import_prop_types.default.string,
    keyboardDateTime12h: import_prop_types.default.string,
    keyboardDateTime24h: import_prop_types.default.string,
    minutes: import_prop_types.default.string,
    month: import_prop_types.default.string,
    monthAndDate: import_prop_types.default.string,
    monthAndYear: import_prop_types.default.string,
    monthShort: import_prop_types.default.string,
    normalDate: import_prop_types.default.string,
    normalDateWithWeekday: import_prop_types.default.string,
    seconds: import_prop_types.default.string,
    shortDate: import_prop_types.default.string,
    weekday: import_prop_types.default.string,
    weekdayShort: import_prop_types.default.string,
    year: import_prop_types.default.string
  }),
  dateLibInstance: import_prop_types.default.any,
  locale: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string]),
  localeText: import_prop_types.default.object
} : void 0;

export {
  nlNL,
  plPL,
  ptBR,
  trTR,
  deDE,
  esES,
  faIR,
  fiFI,
  csCZ,
  frFR,
  DEFAULT_LOCALE,
  enUS,
  nbNO,
  svSE,
  itIT,
  zhCN,
  koKR,
  isIS,
  jaJP,
  ukUA,
  urPK,
  beBY,
  ruRU,
  MuiPickersAdapterContext,
  LocalizationProvider
};
//# sourceMappingURL=chunk-SC76ZGEV.js.map
